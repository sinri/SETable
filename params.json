{
  "name": "SETable",
  "tagline": "Excel-style table in Html+jQuery+CSS. Tab for Sheets, and scrollable tables with Fixed Header and Left Bar for each.",
  "body": "# SETable\r\n利用类Excel多页多表兼容数据结构自动生成分页分表的HTML前端界面。支持合并单元格、单元格格式设定、按列排序等实际生产环境中所利用的功能。SETable是为[LeqeeData项目](https://bi.leqee.com/)而设计的。参考了早先开发的[SinriTable.js](http://github.everstray.com/SinriTable.js/)项目，并针对报表展示功能作了特异化。\r\n\r\n主要达成的需求如下。让我们携起手来把乐其的业务方干掉吧，他们都是妖怪。\r\n\r\n1. 合并单元格展示可能。\r\n2. 列标题区块固定，上下滚动可能。\r\n3. 左侧行标题区块固定，左右滚动可能。\r\n4. 表体滚动后，每一可见内容单元格的行标题和列标题的对应显示保持正常。\r\n5. 可以按某一列排序。\r\n\r\n## 结构设计\r\n\r\n一个页面只能构建一个SETable。一个SETable由多个Sheet构成，每个Sheet内包含若干个AtomTable，每个AtomTable可以包含一个在左侧的行标题区，一个在右侧的列标题区和表体。AtomTable的左上角为特殊的行标题，属于固定内容。\r\n\r\n如下所示：\r\n\r\n| 左上角 | 列标题区 |\r\n|----|----|\r\n| 行标题区 | 表体 |\r\n\r\n以上四个区块均可以视为四个表格，要求相邻边的格数一致。\r\n\r\n## 数据结构\r\n\r\n整个SETable由一个对象（Object）控制，可以由JSON解析而来，定义如下：\r\n\r\n\tvar SETableDataObject = {\r\n\t\tsheets:[\r\n\t\t\tSheetDataObject_1,\r\n\t\t\tSheetDataObject_2 // ...\r\n\t\t]\r\n\t}\r\n\r\n每个Sheet的构成为：\r\n\r\n\tvar SheetDataObject = {\t\t\r\n\t\tsheet_name:\"Sheet Name\",\r\n\t\tsheet_data:[\r\n\t\t\tAtomTableDataObject_1,\r\n\t\t\tAtomTableDataObject_2 // ...\r\n\t\t]\r\n\t}\r\n\r\n每个AtomTable的构成为：\r\n\r\n\tvar AtomTableDataObject = {\r\n\t\tcorner_span:TableElementDataObject_Corner,\r\n\t\tfixed_left:TableElementDataObject_Left,\r\n\t\theader:TableElementDataObject_Header,\r\n\t\tbody:TableElementDataObject_Body,\r\n\t\ttail:TableElementDataObject_Tail\r\n\t}\r\n\r\n其中header和body是必须存在的，tail是可选的。fixed_left存在时，corner_span可选；fixed_left不存在时，corner_span将被忽略。\r\n\r\n每个TableElementDataObject的构成为：\r\n\r\n\tvar TableElementDataObject = [\r\n\t\tTableRowDataObject_1,\r\n\t\tTableRowDataObject_2 // ...\r\n\t]\r\n\r\n每个TableRowDataObject的构成为：\r\n\r\n\tvar TableRowDataObject = [\r\n\t\tTableCellDataObject_1,\r\n\t\tTableCellDataObject_2 // ...\r\n\t]\r\n\r\n每个TableCellDataObject的构成为：\r\n\r\n\t// as string\r\n\tvar TableCellDataObject = \"VALUE OF CELL AS STRING\"\r\n\t// as number\r\n\tvar TableCellDataObject = 1\r\n\t// as object\r\n\tvar TableCellDataObject = {\r\n\t\tvalue: 'string or number', \r\n\t\trowspan: 1, // default as 1\r\n\t\tcolspan: 1, // default as 1\r\n\t\tstyle_id: 'CLASS_NAME FOR THIS TH/TD ELEMENT' // default as empty\r\n\t}\r\n\r\n当TableCellDataObject被定义为对象时，value是必选的。\r\n\r\n## 外观配置\r\n\r\n使用config数据结构进行附加的配置。\r\n\r\n\tvar config={\r\n        cell:{\r\n            width: 120,\r\n            height: 30\r\n        },\r\n        box:{\r\n            width: 300,\r\n            height: 300\r\n        },\r\n        browser: { \r\n        \tbrowser:'Safari', \r\n        \tversion : '601.6.17', \r\n        \tagent : 'Safari 601.6.17', \r\n        \tplatform : 'Mac OS X' \r\n        }\r\n    }\r\n\r\n每个最小单元格的标准尺寸以cell表明。合并单元格后的尺寸按此标准尺寸加倍。每个表格整体可见区域尺寸由box表明。对于不同浏览器下的显示兼容问题，SETable提供了根据UserAgent信息进行对已知的浏览器环境进行适配的参数即browser，可以参照例子进行配置。\r\n\r\n## 使用方法\r\n\r\n### 初始化\r\n\r\n在HTML中构建一个目标DIV，例如`<div id=\"target\"></div>`。SETable所有新生成的元素均会包含在其内。\r\n\r\n\tvar SETable=se_table('target',SETableDataObject,config);\r\n\r\n### 排序\r\n\r\n如果行标题区块中不存在包含跨行合并单元格，则列标题区最下方一行的每一个单元格内部右侧均会显示上下三角，用作排序按钮，默认按照数值化排序。\r\n\r\n如果需要在初始化之后立即排序，可以使用sortForColumn方法。\r\n\r\n\tSETable.sortForColumn(ID_OF_TABLE,INDEX_OF_COLUMN_TO_SORT,SORT_METHOD);\r\n\r\n* ID_OF_TABLE 每个表格的ID为 `SE_TABLE_ATOMTABLE_DIV_s_t` ，其中s为sheet的索引号，t为table的索引号，例如第一个sheet的第一个table的id为SE_TABLE_ATOMTABLE_DIV_0_0。\r\n* INDEX_OF_COLUMN_TO_SORT 要排序的列的索引号，第一列就是0。\r\n* SORT_METHOD 排序的方法，可取值为`asc`（字符顺序排序）、`desc`（字符倒序排序）、`number_asc`（数值化顺序排序）、`number_desc`（数值化倒序排序）。数值化排序会先移除表格单元格内容中的非数字字符串以转换成数字进行排序，主要用来处理带千分位分隔符的内容。\r\n\r\n# 使用许可\r\n\r\nUnder the MIT License (MIT)\r\n\r\nCopyright (c) 2016 Everstray Jun Sinri Edogawa\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}